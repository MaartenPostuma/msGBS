# Authors v1.0 (Legacy):    ..., ..., ... & ...
# Authors v2.0 (New):       Jelle van der Heide
# Date:                     ../../..
# 
# This is the main msGBS pipeline file. Here, the environment-variables are defined and a connection is 
# made between the rule all and the additional rule-files.
# --------------------------------------------------------------------------------------------------------------------

import pandas as pd
import os

configfile: "../Config/config.yaml"

# -- define dataframe from barcodefile.
df = pd.read_csv(os.path.join(config["input_dir"],config["barcode_file"]), sep='\t', index_col='Sample')
df['sample']=df.index
df['run'] = df['rawR1'].str.replace("_R1.fq.gz","",regex=False)

# -- define wildcards from the barcode dataframe.
SAMPLES = df.index
MONOS = df.index[df.index.str.contains("mono")]
NONMONOS=df.index[~df.index.str.contains("mono")]
RUN = df.rawR1.str.replace("_R1.fq.gz","",regex=False).unique()
readfile  = [1, 2]
grouped = df.groupby("run")["sample"].apply(set)
LANESAMPLE = grouped.to_dict()

if config["ref_mode"]=="Available":
    ref=config["ref_loc"]
else:
    ref=expand("{output_dir}/Blasting/Eukaryota_ref.fa",output_dir=config["output_dir"])

# -- define variables from the barcode dataframe.
lane = df.Lane[0]
flowCell = df.Flowcell[0]
DUPES=df.index.duplicated().any()
SAMPLES = {}
for lane, samples in LANESAMPLE.items():
    for sample in samples:
        SAMPLES[sample] = lane

# -- define run conditions from config.
if config["mapper_mode"]=="All":
    MAPPER=["Bowtie", "Bwa", "Star"]
else:
    MAPPER=config["mapper_mode"]

# -- define which rule-files to implement.
include: "Rules/Preprocessing.smk"
include: "Rules/Reference_creation.smk"
include: "Rules/Blasting.smk"
include: "Rules/Mapping.smk"
include: "Rules/Analysis.smk"

# -- define rule all, or essentially the output goal of this pipeline.
rule all:
    input:
        #allpreprocessed=expand("{allpreprocessed_dir}/preprocessed_R{readfile}.fq.gz",  allpreprocessed_dir=config["allpreprocessed_dir"], readfile=readfile),
        #bamOut=expand("{output_dir}/Mapping/Bamout/{mapper}/mapping_rg_{sample}.bam",output_dir=config["output_dir"], mapper=MAPPER, sample=SAMPLES),
        statscsv=expand("{output_dir}/Analysis/{mapper}/stats.tsv",output_dir=config["output_dir"], mapper=MAPPER),
        Data1=expand("{output_dir}/Analysis/{mapper}/Data_1_Clusters_Target_vs_Reason_to_remove_8_15_1000_summed_per_species.txt", output_dir=config["output_dir"], mapper=MAPPER),
        Data2=expand("{output_dir}/Analysis/{mapper}/Data_2_Clusters_filtered_due_to_homology_to_8_15_1000.txt", output_dir=config["output_dir"], mapper=MAPPER),
        Data3=expand("{output_dir}/Analysis/{mapper}/Data_3_READ_COUNT_removed_CLUSTERS_SUM_8_15_1000.tsv", output_dir=config["output_dir"], mapper=MAPPER),
        Data4=expand("{output_dir}/Analysis/{mapper}/Data_4_SUM_8_15_1000.tsv", output_dir=config["output_dir"], mapper=MAPPER),
        Data5=expand("{output_dir}/Analysis/{mapper}/Data_5_SUM_MINREAD_FILTER_8_15_1000.tsv", output_dir=config["output_dir"], mapper=MAPPER),
        alllogs=expand("{output_dir}/logSummary/multiQClogsummary.html", output_dir=config["output_dir"])